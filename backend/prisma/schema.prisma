generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String      @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole   @default(CUSTOMER) // 'customer', 'restaurantOwner', 'rider'
  orders   Order[]
  restaurant Restaurant[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Restaurant {
  id       String      @id @default(uuid())
  name     String
  ownerId  String
  owner    User     @relation(fields: [ownerId], references: [id])
  locationId  String
  location    Location     @relation(fields: [locationId], references: [id])
  items    Item[]
  orders Order[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Location {
  id         String      @id @default(uuid())
  address    String
  province   String      @default("Bangkok")
  districtId String
  district   District @relation(fields: [districtId], references: [id])
  Restaurant Restaurant[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model District {
  id         String      @id @default(uuid())
  name       String
  Location Location[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Item {
  id            String      @id @default(uuid())
  name          String      
  description   String?     
  price         Float       
  available     Boolean     @default(true)
  category      String      
  imageUrl      String?     
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  restaurantId  String      
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id]) // Relationship to the Restaurant model
  orderItem     OrderItem[] 
  @@index([name])
  @@index([category])
  @@index([restaurantId])
}

model OrderItem {
  id       String      @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  quantity  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Order {
  id       String      @id @default(uuid())
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id])
  restaurantId String
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  orderItems  OrderItem[]
  status      OrderStatus   @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  RESTAURANT_OWNER
  RIDER
}